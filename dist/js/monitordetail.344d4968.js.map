{"version":3,"sources":["webpack:///./src/views/MonitorDetail.vue","webpack:///./src/views/MonitorDetail.vue?0953","webpack:///./src/views/MonitorDetail.vue?234b","webpack:///./src/utils/DateUtils.ts","webpack:///./src/views/MonitorDetail.vue?0815"],"names":["class","style","ref","pvstringDetailProps","deviceName","u","i","p","degradationRatio","soilingRatio","meteoData","temperature","humidity","pressure","windDirection","windSpeed","poa","setup","min","max","uCharts","iCharts","pCharts","tempCharts","mUList","mIList","mPList","mTempList","initCharts","muCharts","value","myuChart","echarts","setOption","title","left","text","textStyle","color","xAxis","type","splitLine","show","axisLabel","formatter","data","Date","hours","getHours","minutes","getMinutes","hourString","minuteString","yAxis","series","smooth","showSymbol","hoverAnimation","miCharts","myiChart","mpCharts","mypCharts","mtempCharts","console","log","mytempCharts","route","store","state","uList","deviceDataOfToday","map","item","name","time","iList","pList","isStandard","intervalTask","refreshUI","dispatch","deviceId","params","id","window","setInterval","clearInterval","render","__scopeId","formatDate","dateTime","year","getFullYear","month","getMonth","day","getDate","seconds","getSeconds","week","getDay","weekString","currentTime","Dates","Year","Months","Day"],"mappings":"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","file":"js/monitordetail.344d4968.js","sourcesContent":["<template>\r\n<div class=\"container\">\r\n  <div class=\"container__title\">\r\n    <p>\r\n      {{pvstringDetailProps.deviceName}}：\r\n      <span>电压：{{pvstringDetailProps.u}}</span>\r\n      <span>电流：{{pvstringDetailProps.i}}</span>\r\n      <span>功率：{{pvstringDetailProps.p}}</span>\r\n      <span v-if=\"pvstringDetailProps.isStandard\">组件衰减率：{{pvstringDetailProps.degradationRatio}}</span>\r\n      <span v-if=\"pvstringDetailProps.isStandard\">灰尘损失率：{{pvstringDetailProps.soilingRatio}}</span>\r\n    </p>\r\n  </div>\r\n  <div class=\"container__title\">\r\n    <p>\r\n      环境数据：\r\n      <span style=\"margin-left: 0.2rem;\">{{`温度：${meteoData.temperature}`}}</span>\r\n      <span>{{`湿度：${meteoData.humidity}`}}</span>\r\n      <span>{{`压力：${meteoData.pressure}`}}</span>\r\n      <span>{{`风向：${meteoData.windDirection}`}}</span>\r\n      <span>{{`风速：${meteoData.windSpeed}`}}</span>\r\n      <span>{{`Poa：${meteoData.poa}`}}</span>\r\n    </p>\r\n  </div>\r\n  <div class=\"container__content\">\r\n    <div class=\"container__content__chart\" ref=\"uCharts\"></div>\r\n    <div class=\"container__content__chart\" ref=\"iCharts\"></div>\r\n    <div class=\"container__content__chart\" ref=\"pCharts\"></div>\r\n    <div class=\"container__content__chart\" ref=\"tempCharts\"></div>\r\n  </div>\r\n</div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, onMounted, onBeforeUnmount, computed, reactive, ref, watch } from 'vue'\r\n// 获取路由信息\r\nimport { useRoute } from 'vue-router'\r\nimport { GlobalDataProps, PvstringDetailProps } from '../store'\r\nimport { useStore } from 'vuex'\r\nimport * as echarts from 'echarts'\r\nimport { currentTime } from '../utils/DateUtils'\r\n\r\nexport default defineComponent({\r\n  setup() {\r\n    const min = `${currentTime()} 00:00:00`\r\n    const max = `${currentTime()} 24:00:00`\r\n\r\n    const uCharts = ref(null)\r\n    const iCharts = ref(null)\r\n    const pCharts = ref(null)\r\n    const tempCharts = ref(null)\r\n    const mUList = ref()\r\n    const mIList = ref()\r\n    const mPList = ref()\r\n    const mTempList = ref()\r\n    // echart 初始化\r\n    const initCharts = () => {\r\n      // 电压\r\n      const muCharts = uCharts.value\r\n      if (muCharts) {\r\n        var myuChart = echarts.init(muCharts)\r\n        // 绘制图表\r\n        myuChart.setOption({\r\n          title: {\r\n            left: 'center',\r\n            text: 'DC电压',\r\n            textStyle: {\r\n              color: '#fff'\r\n            }\r\n          },\r\n          // tooltip: {\r\n          //   trigger: 'axis',\r\n          //   axisPointer: {\r\n          //     type: 'cross'\r\n          //   }\r\n          // },\r\n          xAxis: {\r\n            type: 'time', // 时间轴\r\n            splitLine: {\r\n              show: false\r\n            },\r\n            min,\r\n            max,\r\n            axisLabel: {\r\n              formatter: function (value:any) {\r\n                var data = new Date(value)\r\n                var hours = data.getHours()\r\n                var minutes = data.getMinutes()\r\n                var hourString = hours + ''\r\n                var minuteString = minutes + ''\r\n                if (hours < 10) {\r\n                  hourString = '0' + hours\r\n                }\r\n                if (minutes < 10) {\r\n                  minuteString = '0' + minutes\r\n                }\r\n                return hourString + ':' + minuteString\r\n              }\r\n            }\r\n          },\r\n          yAxis: {\r\n            type: 'value',\r\n            axisLabel: {\r\n              formatter: '{value} V'\r\n            }\r\n          },\r\n          series: [{\r\n            type: 'line',\r\n            smooth: true,\r\n            data: mUList.value,\r\n            showSymbol: false,\r\n            hoverAnimation: false\r\n          }]\r\n        })\r\n      }\r\n\r\n      // 电流\r\n      const miCharts = iCharts.value\r\n      if (miCharts) {\r\n        var myiChart = echarts.init(miCharts)\r\n        // 绘制图表\r\n        myiChart.setOption({\r\n          title: {\r\n            left: 'center',\r\n            text: 'DC电流',\r\n            textStyle: {\r\n              color: '#fff'\r\n            }\r\n          },\r\n          // tooltip: {\r\n          //   trigger: 'axis',\r\n          //   axisPointer: {\r\n          //     type: 'cross'\r\n          //   }\r\n          // },\r\n          xAxis: {\r\n            type: 'time', // 时间轴\r\n            splitLine: {\r\n              show: false\r\n            },\r\n            min,\r\n            max,\r\n            axisLabel: {\r\n              formatter: function (value:any) {\r\n                var data = new Date(value)\r\n                var hours = data.getHours()\r\n                var minutes = data.getMinutes()\r\n                var hourString = hours + ''\r\n                var minuteString = minutes + ''\r\n                if (hours < 10) {\r\n                  hourString = '0' + hours\r\n                }\r\n                if (minutes < 10) {\r\n                  minuteString = '0' + minutes\r\n                }\r\n                return hourString + ':' + minuteString\r\n              }\r\n            }\r\n          },\r\n          yAxis: {\r\n            type: 'value',\r\n            axisLabel: {\r\n              formatter: '{value} A'\r\n            }\r\n          },\r\n          series: [{\r\n            data: mIList.value,\r\n            type: 'line',\r\n            smooth: true,\r\n            showSymbol: false,\r\n            hoverAnimation: false\r\n          }]\r\n        })\r\n      }\r\n\r\n      // 功率\r\n      const mpCharts = pCharts.value\r\n      if (mpCharts) {\r\n        var mypCharts = echarts.init(mpCharts)\r\n        // 绘制图表\r\n        mypCharts.setOption({\r\n          title: {\r\n            left: 'center',\r\n            text: '组串功率',\r\n            textStyle: {\r\n              color: '#fff'\r\n            }\r\n          },\r\n          // tooltip: {\r\n          //   trigger: 'axis',\r\n          //   axisPointer: {\r\n          //     type: 'cross'\r\n          //   }\r\n          // },\r\n          xAxis: {\r\n            type: 'time', // 时间轴\r\n            splitLine: {\r\n              show: false\r\n            },\r\n            min,\r\n            max,\r\n            axisLabel: {\r\n              formatter: function (value:any) {\r\n                var data = new Date(value)\r\n                var hours = data.getHours()\r\n                var minutes = data.getMinutes()\r\n                var hourString = hours + ''\r\n                var minuteString = minutes + ''\r\n                if (hours < 10) {\r\n                  hourString = '0' + hours\r\n                }\r\n                if (minutes < 10) {\r\n                  minuteString = '0' + minutes\r\n                }\r\n                return hourString + ':' + minuteString\r\n              }\r\n            }\r\n          },\r\n          yAxis: {\r\n            type: 'value',\r\n            axisLabel: {\r\n              formatter: '{value} W'\r\n            }\r\n          },\r\n          series: [{\r\n            data: mPList.value,\r\n            type: 'line',\r\n            smooth: true,\r\n            showSymbol: false,\r\n            hoverAnimation: false\r\n          }]\r\n        })\r\n      }\r\n\r\n      // 温度\r\n      const mtempCharts = tempCharts.value\r\n      console.log('mtempCharts', mtempCharts)\r\n      if (mtempCharts && mTempList.value) {\r\n        var mytempCharts = echarts.init(mtempCharts)\r\n        // 绘制图表\r\n        mytempCharts.setOption({\r\n          title: {\r\n            left: 'center',\r\n            text: '背板温度',\r\n            textStyle: {\r\n              color: '#fff'\r\n            }\r\n          },\r\n          // tooltip: {\r\n          //   trigger: 'axis',\r\n          //   axisPointer: {\r\n          //     type: 'cross'\r\n          //   }\r\n          // },\r\n          xAxis: {\r\n            type: 'time', // 时间轴\r\n            splitLine: {\r\n              show: false\r\n            },\r\n            min,\r\n            max,\r\n            axisLabel: {\r\n              formatter: function (value:any) {\r\n                var data = new Date(value)\r\n                var hours = data.getHours()\r\n                var minutes = data.getMinutes()\r\n                var hourString = hours + ''\r\n                var minuteString = minutes + ''\r\n                if (hours < 10) {\r\n                  hourString = '0' + hours\r\n                }\r\n                if (minutes < 10) {\r\n                  minuteString = '0' + minutes\r\n                }\r\n                return hourString + ':' + minuteString\r\n              }\r\n            }\r\n          },\r\n          yAxis: {\r\n            type: 'value',\r\n            axisLabel: {\r\n              formatter: '{value} ℃'\r\n            }\r\n          },\r\n          series: [{\r\n            data: mTempList.value,\r\n            type: 'line',\r\n            smooth: true,\r\n            showSymbol: false,\r\n            hoverAnimation: false\r\n          }]\r\n        })\r\n      }\r\n    }\r\n    const route = useRoute()\r\n    const store = useStore<GlobalDataProps>()\r\n    const pvstringDetailProps = computed(() => {\r\n      return store.state.pvstringDetailProps\r\n    })\r\n    watch(pvstringDetailProps, () => {\r\n      const pvstringDetailProps = store.state.pvstringDetailProps\r\n      const uList = pvstringDetailProps.deviceDataOfToday?.map((item) => {\r\n        return {\r\n          name: 'a',\r\n          value: [\r\n            item.time,\r\n            item.u\r\n          ]\r\n        }\r\n      })\r\n      if (uList) {\r\n        mUList.value = uList\r\n        console.log('ulist', mUList)\r\n      }\r\n      const iList = pvstringDetailProps.deviceDataOfToday?.map((item) => {\r\n        return {\r\n          name: 'a',\r\n          value: [\r\n            item.time,\r\n            item.i\r\n          ]\r\n        }\r\n      })\r\n      if (iList) {\r\n        mIList.value = iList\r\n      }\r\n      const pList = pvstringDetailProps.deviceDataOfToday?.map((item) => {\r\n        return {\r\n          name: 'a',\r\n          value: [\r\n            item.time,\r\n            item.p\r\n          ]\r\n        }\r\n      })\r\n      if (pList) {\r\n        mPList.value = pList\r\n      }\r\n      if (pvstringDetailProps.isStandard) {\r\n        mTempList.value = pvstringDetailProps.deviceDataOfToday?.map((item) => {\r\n          return {\r\n            name: 'a',\r\n            value: [\r\n              item.time,\r\n              item.temperature\r\n            ]\r\n          }\r\n        })\r\n      }\r\n      initCharts()\r\n    })\r\n\r\n    const meteoData = computed(() => store.state.meteoData)\r\n\r\n    var refreshUI = function() {\r\n      // 获取当前气象数据\r\n      store.dispatch('getMeteoData')\r\n      // 获取光伏组串详情\r\n      store.dispatch('getPvStringDetail', { deviceId: route.params.id })\r\n    }\r\n    let intervalTask: number\r\n\r\n    onMounted(() => {\r\n      refreshUI()\r\n      intervalTask = window.setInterval(refreshUI, 300000)\r\n    })\r\n\r\n    onBeforeUnmount(() => {\r\n      if (intervalTask) {\r\n        window.clearInterval(intervalTask)\r\n      }\r\n    })\r\n\r\n    console.log('isStandard---------', pvstringDetailProps.value.isStandard)\r\n    return {\r\n      pvstringDetailProps,\r\n      uCharts,\r\n      iCharts,\r\n      pCharts,\r\n      tempCharts,\r\n      meteoData\r\n    }\r\n  }\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\nh1{\r\n  color: white;\r\n}\r\n.container{\r\n  margin-left: 2rem;\r\n  &__title{\r\n    height: 0.3rem;\r\n    p{\r\n      width: 100%;\r\n      height: 0.3rem;\r\n      display: flex;\r\n      justify-content: flex-start;\r\n      align-items: center;\r\n      color: white;\r\n    }\r\n    span{\r\n      display: inline-block;\r\n      margin-left: 0.4rem;\r\n      color: white;\r\n    }\r\n  }\r\n  &__content{\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n    margin-top: .5rem;\r\n    &__chart{\r\n      width: 600px;\r\n      height: 300px;\r\n    }\r\n  }\r\n}\r\n</style>\r\n","\r\nimport { defineComponent, onMounted, onBeforeUnmount, computed, reactive, ref, watch } from 'vue'\r\n// 获取路由信息\r\nimport { useRoute } from 'vue-router'\r\nimport { GlobalDataProps, PvstringDetailProps } from '../store'\r\nimport { useStore } from 'vuex'\r\nimport * as echarts from 'echarts'\r\nimport { currentTime } from '../utils/DateUtils'\r\n\r\nexport default defineComponent({\r\n  setup() {\r\n    const min = `${currentTime()} 00:00:00`\r\n    const max = `${currentTime()} 24:00:00`\r\n\r\n    const uCharts = ref(null)\r\n    const iCharts = ref(null)\r\n    const pCharts = ref(null)\r\n    const tempCharts = ref(null)\r\n    const mUList = ref()\r\n    const mIList = ref()\r\n    const mPList = ref()\r\n    const mTempList = ref()\r\n    // echart 初始化\r\n    const initCharts = () => {\r\n      // 电压\r\n      const muCharts = uCharts.value\r\n      if (muCharts) {\r\n        var myuChart = echarts.init(muCharts)\r\n        // 绘制图表\r\n        myuChart.setOption({\r\n          title: {\r\n            left: 'center',\r\n            text: 'DC电压',\r\n            textStyle: {\r\n              color: '#fff'\r\n            }\r\n          },\r\n          // tooltip: {\r\n          //   trigger: 'axis',\r\n          //   axisPointer: {\r\n          //     type: 'cross'\r\n          //   }\r\n          // },\r\n          xAxis: {\r\n            type: 'time', // 时间轴\r\n            splitLine: {\r\n              show: false\r\n            },\r\n            min,\r\n            max,\r\n            axisLabel: {\r\n              formatter: function (value:any) {\r\n                var data = new Date(value)\r\n                var hours = data.getHours()\r\n                var minutes = data.getMinutes()\r\n                var hourString = hours + ''\r\n                var minuteString = minutes + ''\r\n                if (hours < 10) {\r\n                  hourString = '0' + hours\r\n                }\r\n                if (minutes < 10) {\r\n                  minuteString = '0' + minutes\r\n                }\r\n                return hourString + ':' + minuteString\r\n              }\r\n            }\r\n          },\r\n          yAxis: {\r\n            type: 'value',\r\n            axisLabel: {\r\n              formatter: '{value} V'\r\n            }\r\n          },\r\n          series: [{\r\n            type: 'line',\r\n            smooth: true,\r\n            data: mUList.value,\r\n            showSymbol: false,\r\n            hoverAnimation: false\r\n          }]\r\n        })\r\n      }\r\n\r\n      // 电流\r\n      const miCharts = iCharts.value\r\n      if (miCharts) {\r\n        var myiChart = echarts.init(miCharts)\r\n        // 绘制图表\r\n        myiChart.setOption({\r\n          title: {\r\n            left: 'center',\r\n            text: 'DC电流',\r\n            textStyle: {\r\n              color: '#fff'\r\n            }\r\n          },\r\n          // tooltip: {\r\n          //   trigger: 'axis',\r\n          //   axisPointer: {\r\n          //     type: 'cross'\r\n          //   }\r\n          // },\r\n          xAxis: {\r\n            type: 'time', // 时间轴\r\n            splitLine: {\r\n              show: false\r\n            },\r\n            min,\r\n            max,\r\n            axisLabel: {\r\n              formatter: function (value:any) {\r\n                var data = new Date(value)\r\n                var hours = data.getHours()\r\n                var minutes = data.getMinutes()\r\n                var hourString = hours + ''\r\n                var minuteString = minutes + ''\r\n                if (hours < 10) {\r\n                  hourString = '0' + hours\r\n                }\r\n                if (minutes < 10) {\r\n                  minuteString = '0' + minutes\r\n                }\r\n                return hourString + ':' + minuteString\r\n              }\r\n            }\r\n          },\r\n          yAxis: {\r\n            type: 'value',\r\n            axisLabel: {\r\n              formatter: '{value} A'\r\n            }\r\n          },\r\n          series: [{\r\n            data: mIList.value,\r\n            type: 'line',\r\n            smooth: true,\r\n            showSymbol: false,\r\n            hoverAnimation: false\r\n          }]\r\n        })\r\n      }\r\n\r\n      // 功率\r\n      const mpCharts = pCharts.value\r\n      if (mpCharts) {\r\n        var mypCharts = echarts.init(mpCharts)\r\n        // 绘制图表\r\n        mypCharts.setOption({\r\n          title: {\r\n            left: 'center',\r\n            text: '组串功率',\r\n            textStyle: {\r\n              color: '#fff'\r\n            }\r\n          },\r\n          // tooltip: {\r\n          //   trigger: 'axis',\r\n          //   axisPointer: {\r\n          //     type: 'cross'\r\n          //   }\r\n          // },\r\n          xAxis: {\r\n            type: 'time', // 时间轴\r\n            splitLine: {\r\n              show: false\r\n            },\r\n            min,\r\n            max,\r\n            axisLabel: {\r\n              formatter: function (value:any) {\r\n                var data = new Date(value)\r\n                var hours = data.getHours()\r\n                var minutes = data.getMinutes()\r\n                var hourString = hours + ''\r\n                var minuteString = minutes + ''\r\n                if (hours < 10) {\r\n                  hourString = '0' + hours\r\n                }\r\n                if (minutes < 10) {\r\n                  minuteString = '0' + minutes\r\n                }\r\n                return hourString + ':' + minuteString\r\n              }\r\n            }\r\n          },\r\n          yAxis: {\r\n            type: 'value',\r\n            axisLabel: {\r\n              formatter: '{value} W'\r\n            }\r\n          },\r\n          series: [{\r\n            data: mPList.value,\r\n            type: 'line',\r\n            smooth: true,\r\n            showSymbol: false,\r\n            hoverAnimation: false\r\n          }]\r\n        })\r\n      }\r\n\r\n      // 温度\r\n      const mtempCharts = tempCharts.value\r\n      console.log('mtempCharts', mtempCharts)\r\n      if (mtempCharts && mTempList.value) {\r\n        var mytempCharts = echarts.init(mtempCharts)\r\n        // 绘制图表\r\n        mytempCharts.setOption({\r\n          title: {\r\n            left: 'center',\r\n            text: '背板温度',\r\n            textStyle: {\r\n              color: '#fff'\r\n            }\r\n          },\r\n          // tooltip: {\r\n          //   trigger: 'axis',\r\n          //   axisPointer: {\r\n          //     type: 'cross'\r\n          //   }\r\n          // },\r\n          xAxis: {\r\n            type: 'time', // 时间轴\r\n            splitLine: {\r\n              show: false\r\n            },\r\n            min,\r\n            max,\r\n            axisLabel: {\r\n              formatter: function (value:any) {\r\n                var data = new Date(value)\r\n                var hours = data.getHours()\r\n                var minutes = data.getMinutes()\r\n                var hourString = hours + ''\r\n                var minuteString = minutes + ''\r\n                if (hours < 10) {\r\n                  hourString = '0' + hours\r\n                }\r\n                if (minutes < 10) {\r\n                  minuteString = '0' + minutes\r\n                }\r\n                return hourString + ':' + minuteString\r\n              }\r\n            }\r\n          },\r\n          yAxis: {\r\n            type: 'value',\r\n            axisLabel: {\r\n              formatter: '{value} ℃'\r\n            }\r\n          },\r\n          series: [{\r\n            data: mTempList.value,\r\n            type: 'line',\r\n            smooth: true,\r\n            showSymbol: false,\r\n            hoverAnimation: false\r\n          }]\r\n        })\r\n      }\r\n    }\r\n    const route = useRoute()\r\n    const store = useStore<GlobalDataProps>()\r\n    const pvstringDetailProps = computed(() => {\r\n      return store.state.pvstringDetailProps\r\n    })\r\n    watch(pvstringDetailProps, () => {\r\n      const pvstringDetailProps = store.state.pvstringDetailProps\r\n      const uList = pvstringDetailProps.deviceDataOfToday?.map((item) => {\r\n        return {\r\n          name: 'a',\r\n          value: [\r\n            item.time,\r\n            item.u\r\n          ]\r\n        }\r\n      })\r\n      if (uList) {\r\n        mUList.value = uList\r\n        console.log('ulist', mUList)\r\n      }\r\n      const iList = pvstringDetailProps.deviceDataOfToday?.map((item) => {\r\n        return {\r\n          name: 'a',\r\n          value: [\r\n            item.time,\r\n            item.i\r\n          ]\r\n        }\r\n      })\r\n      if (iList) {\r\n        mIList.value = iList\r\n      }\r\n      const pList = pvstringDetailProps.deviceDataOfToday?.map((item) => {\r\n        return {\r\n          name: 'a',\r\n          value: [\r\n            item.time,\r\n            item.p\r\n          ]\r\n        }\r\n      })\r\n      if (pList) {\r\n        mPList.value = pList\r\n      }\r\n      if (pvstringDetailProps.isStandard) {\r\n        mTempList.value = pvstringDetailProps.deviceDataOfToday?.map((item) => {\r\n          return {\r\n            name: 'a',\r\n            value: [\r\n              item.time,\r\n              item.temperature\r\n            ]\r\n          }\r\n        })\r\n      }\r\n      initCharts()\r\n    })\r\n\r\n    const meteoData = computed(() => store.state.meteoData)\r\n\r\n    var refreshUI = function() {\r\n      // 获取当前气象数据\r\n      store.dispatch('getMeteoData')\r\n      // 获取光伏组串详情\r\n      store.dispatch('getPvStringDetail', { deviceId: route.params.id })\r\n    }\r\n    let intervalTask: number\r\n\r\n    onMounted(() => {\r\n      refreshUI()\r\n      intervalTask = window.setInterval(refreshUI, 300000)\r\n    })\r\n\r\n    onBeforeUnmount(() => {\r\n      if (intervalTask) {\r\n        window.clearInterval(intervalTask)\r\n      }\r\n    })\r\n\r\n    console.log('isStandard---------', pvstringDetailProps.value.isStandard)\r\n    return {\r\n      pvstringDetailProps,\r\n      uCharts,\r\n      iCharts,\r\n      pCharts,\r\n      tempCharts,\r\n      meteoData\r\n    }\r\n  }\r\n})\r\n","import { render } from \"./MonitorDetail.vue?vue&type=template&id=07d21f2e&scoped=true\"\nimport script from \"./MonitorDetail.vue?vue&type=script&lang=ts\"\nexport * from \"./MonitorDetail.vue?vue&type=script&lang=ts\"\n\nimport \"./MonitorDetail.vue?vue&type=style&index=0&id=07d21f2e&lang=scss&scoped=true\"\nscript.render = render\nscript.__scopeId = \"data-v-07d21f2e\"\n\nexport default script","export const formatDate = (time: Date) => {\r\n  const dateTime = new Date(time)\r\n  const year: number = dateTime.getFullYear()\r\n  const month: any = (dateTime.getMonth() + 1) < 10 ? '0' + (dateTime.getMonth() + 1) : (dateTime.getMonth() + 1)\r\n  const day: any = dateTime.getDate() < 10 ? '0' + dateTime.getDate() : dateTime.getDate()\r\n  const hours: any = dateTime.getHours() < 10 ? '0' + dateTime.getHours() : dateTime.getHours()\r\n  const minutes: any = dateTime.getMinutes() < 10 ? '0' + dateTime.getMinutes() : dateTime.getMinutes()\r\n  const seconds: any = dateTime.getSeconds() < 10 ? '0' + dateTime.getSeconds() : dateTime.getSeconds()\r\n  const week: number = dateTime.getDay()\r\n  let weekString = ''\r\n  if (week === 0) {\r\n    weekString = '星期天'\r\n  } else if (week === 1) {\r\n    weekString = '星期一'\r\n  } else if (week === 2) {\r\n    weekString = '星期二'\r\n  } else if (week === 3) {\r\n    weekString = '星期三'\r\n  } else if (week === 4) {\r\n    weekString = '星期四'\r\n  } else if (week === 5) {\r\n    weekString = '星期五'\r\n  } else if (week === 6) {\r\n    weekString = '星期六'\r\n  }\r\n  return year + '-' + month + '-' + day + ' ' + hours + ':' + minutes + ':' + seconds + '  ' + weekString\r\n}\r\n\r\nexport const currentTime = () => {\r\n  const Dates = new Date()\r\n  const Year : number = Dates.getFullYear()\r\n  const Months : any = (Dates.getMonth() + 1) < 10 ? '0' + (Dates.getMonth() + 1) : (Dates.getMonth() + 1)\r\n  const Day : any = Dates.getDate() < 10 ? '0' + Dates.getDate() : Dates.getDate()\r\n  return Year + '-' + Months + '-' + Day\r\n}\r\n","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./MonitorDetail.vue?vue&type=style&index=0&id=07d21f2e&lang=scss&scoped=true\""],"sourceRoot":""}